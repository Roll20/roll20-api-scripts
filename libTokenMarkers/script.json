{
  "name": "libTokenMarkers",
  "script": "libTokenMarkers.js",
  "version": "0.1.0",
  "description": "libTokenMarkers provides an easy encapsulation around Custom Token Markers.  It is a library for other scripts to use and does not have a user interface.  It is intended to be a dependency for other scripts.\r\r## Function Reference\r\r### `libTokenMarkers.getStatus( <arg> )` \r| Argument | Value       | \r| -------- | ------------|\r| arg      | string      |\r| [return] | TokenMarker | \r\rThis function will find the first TokenMarker with a **tag** or **name** of *arg* and return it.  Matches are case-insensitive.  In the case that there is not a matching TokenMarker, it will return an object that behaves like a TokenMarker, but is empty.\r\r```javascript\r      let status = libTokenMarker.getStatus( 'purple-dino' );\r```\r\r### `libTokenMarkers.getStatuses( <arg> )`\r| Argument | Value                | \r| -------- | -------------------- |\r| arg      | string               |\r| [return] | array of TokenMarker | \r\rThis function will find all the TokenMarkers with a **tag** or **name** of *arg* and return an array of all of them.  Matches are case-insensitive.  In the case that there are not any matching TokenMarkers, it will return an empty array.\r```javascript\r      let statuses = libTokenMarker.getStatuses( 'marked' );\r```\r\r\r### `libTokenMarkers.getOrderedList( )`\r| Argument | Value                | \r| -------- | ------               | \r| [return] | array of TokenMarker | \r\rThis function will return an array of all TokenMarkers, in the order they appear in the user interface.\r```javascript\r      let allStatuses = libTokenMarker.getOrderedList();\r```\r\r## TokenMarker Object Reference\r\rAll of the functions above return objects in the TokenMarker class hierarchy.  This provides a uniform interface to the four different types of status markers you might need to deal with:\r* Text -- the `dead` status and its red **X**\r* Color Dot -- the color statuses like `blue` and `pink`, and their non-image based visual\r* Legacy Markers -- the basic set like `archery-target` and `drink-me`, where the name and tag are the same\r* Custom Token Markers -- the new dynamic statuses with their images, names, and numbered tags\r\rThe TokenMarker object has 3 functions on it, detailed below.\r\r### `.getName()`\r| Argument | Value  | \r| -------- | ------ |\r| [return] | string | \r\rThis function returns the text name that was given to the status when it was created.\r\r### `.getTag()`\r| Argument | Value  | \r| -------- | ------ |\r| [return] | string | \r\rThis function returns the text tag that you use for setting it or checking if it is on a token.\r\r### `.getHTML( [scale], [css] )`\r| Argument           | Value                      | \r| --------           | ------                     | \r| scale *(optional)* | number (**Default:** 1.4 ) | \r| css *(optional)*   | css string                 | \r| [return]           | HTML string                | \r\rThis function returns a formatted HTML string which can be output in chat to display what the status looks like.  This is one of the main benefits of the TokenMarker object.  The `scale` parameter can be used to adjust the size of the visual with respect to the text that surrounds it.  Generally, you won't need to supply a parameter as the output will be scaled with the text it is associated with:\r```javascript\r    let tm = libTokenMarkers.getStatus('blue');\r    sendChat('',`<p>Blue at nomral size: ${tm.getHTML()}</p>`);\r    sendChat('',`<h1>Blue at title size: ${tm.getHTML()}</h1>`);\r```\r\r## Example Script\r\r```javascript\r/* global libTokenMarkers */\ron('ready', ()=>{\r\r      // Make sure libTokenMarkers exists, and has the functions that are expected\r      if('undefined' === typeof libTokenMarkers\r            || (['getStatus','getStatuses','getOrderedList'].find(k=>\r                  !libTokenMarkers.hasOwnProperty(k) || 'function' !== typeof libTokenMarkers[k]\r            ))\r      ) { \r            // notify of the missing library\r            sendChat('',`/w gm <div style=\"color:red;font-weight:bold;border:2px solid red;background-color:black;border-radius:1em;padding:1em;\">Missing dependency: libTokenMarkers</div>`);\r      } else {\r\r            // active code\r            on('chat:message',(msg) => {\r\r                  if('api'===msg.type && /^!test-ltm/i.test(msg.content)){\r                // get all the statuses\r                        let all = libTokenMarkers.getOrderedList();\r                        let statLast = all[all.length-1];\r\r                // get all the statuses named 'green'\r                        let statGreen = libTokenMarkers.getStatuses('green');\r\r                // get the first status named 'blue', case-insensitive\r                        let statBlue = libTokenMarkers.getStatus('BlUe');\r\r                        sendChat('',`<div>Found ${all.length} statuses.</div>`);\r                        sendChat('',`<div>Last one is named \"${statLast.getName()}\" with tag \"${statLast.getTag()}\" and looks like ${statLast.getHTML(3)}.</div>`);\r\r                        sendChat('',`<div>There are ${statGreen.length} statuses named green: ${statGreen.map(s=>s.getHTML(1,\"border:1px solid green;padding: .1em; border-radius: .3em; margin: .2em;\")).join('')}</div>`);\r                        sendChat('',`<div>Looked up \"${statBlue.getName()}\" with \"BlUe\", looks like ${statBlue.getHTML(3)}.</div>`);\r\r\r                // trying to get a non-existing status\r                        let nope = libTokenMarkers.getStatus('asdfasdfasdfasdf');\r                        let nopes = libTokenMarkers.getStatuses('asdfasdfasdfasdf');\r                        sendChat('',`<div>Looked up \"asdfasdfasdfasdf\", found name: \"${nope.getName()}\", tag: \"${nope.getTag()}\", image: ${nope.getHTML()}</div>`);\r                        sendChat('',`<div>There are ${nopes.length} statuses named \"asdfasdfasdfasdf\".</div>`);\r\r                        sendChat('',`<div><h3>All Statuses</h3><table style=\"border:1px solid #999;padding:.2em;\"><thead><tr><th style=\"padding: 1px .1em;\">Icon</th><th style=\"padding: 1px .1em;\">Name</th><th style=\"padding: 1px .1em;\">Tag</th></tr></thead><tbody>${\r                              all.map((s,n)=>`<tr style=\"background-color:${n%2?'#fff':'#ccc'}\"><td style=\"padding: 1px .1em;\">${s.getHTML()}</td><td style=\"padding: 1px .1em;\">${s.getName()}</td><td style=\"padding: 1px .1em;\">${s.getTag()}</td></tr>`).join('')\r                        }</tbody></table></div>`);\r                        \r                  }\r            });\r      }\r});\r```",
  "authors": "The Aaron",
  "roll20userid": "104025",
  "patreon": "https://www.patreon.com/shdwjk",
  "useroptions":{
  },
  "dependencies": {
  },
  "modifies": {
    "state.libTokenMarkers": "read,write"
  },
  "conflicts": [
  ]
}
