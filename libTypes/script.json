{
  "name": "libTypes",
  "script": "libTypes.js",
  "version": "0.1.0",
  "description": "**`libTypes`** provides a collection of classes for use by developers in other scripts.  Currently, they are primarily focused on spacial organization of data, but there may be other types in future releases.\r\r## Depending on `libTypes`\r\rTo require `libTypes` for your script, add `\"libTypes\"` to the `\"dependencies\"` property of your `script.json`:\r\r```json\r\"dependencies\": [\"libTypes\"]\r```\r\rFor convenience, you may want to import the types into the scope of your script:\r```javascript\rconst {Rect,Quadtree} = libTypes;  // eslint-disable-line no-unused-vars\r```\r\r## Class Reference\r\r# `Rect`\r\r`Rect` is an Axis-Aligned Bounding Box implementation.  It can be created automatically from the following Roll20 types: `page`, `path`, `text`, and `graphic`.  Rect is intended as a fast placeholder representing real objects in a spacial graph, such as `Quadtree`.\r\r## Creation Functions\r### `Rect(x,y,width,height)`\rThe constructor creates an instance of a `Rect`. `(x,y)` represents the center of the AABB, `width` and `height` are it's external dimensions.\r```javascript\rlet r = new Rect(70,140,35,35);\r```\r\r### `Rect.fromRoll20(roll20Obj)`\rThis static method creates a new `Rect` instance which is appropriate to the type of object passed in.  Internally, it will detect the Roll20 type and delegate to one of the for static methods below.\r```javascript\rlet obj = findObjs({ /* ... */ })[0];\rlet r = Rect.fromRoll20(obj);\r```\r\r### `Rect.fromPage(roll20Page)`\rThis static method creates a new `Rect` instance from a Roll20 `Page` object.\r```javascript\rlet page = findObjs({ type: 'page', /* ... */ })[0];\rlet r = Rect.fromRoll20(page);\r```\r\r### `Rect.fromGraphic(roll20Graphic)`\rThis static method creates a new `Rect` instance from a Roll20 `Graphic` object.\r```javascript\rlet graphic = findObjs({ type: 'graphic', /* ... */ })[0];\rlet r = Rect.fromRoll20(graphic);\r```\r\r### `Rect.fromPath(roll20Path)`\rThis static method creates a new `Rect` instance from a Roll20 `Path` object.\r```javascript\rlet path = findObjs({ type: 'path', /* ... */ })[0];\rlet r = Rect.fromRoll20(path);\r```\r\r### `Rect.fromText(roll20Text)`\rThis static method creates a new `Rect` instance from a Roll20 `Text` object.\r```javascript\rlet text = findObjs({ type: 'text', /* ... */ })[0];\rlet r = Rect.fromRoll20(text);\r```\r\r# `Quadtree`\r\r`Quadtree` is a spacial partitioning data structure designed to allow rapid searching for objects in an area at runtime.\r\r## Creation Functions\r### `Quadtree(rect, config = {})`\rThe constructor creates a `Quadtree` representing a given division of a Cartesian grid.  The `rect` parameter is a `Rect` instance that describes the division the `Quadtree` represents.  Usually this will be the return from `Rect.fromPage(roll20Page)`.  The optional `config` parameter can have the following properties set:\r\r* `maxObjects` -- The number of objects to store in a node before splitting into four sub trees. (**Default:** `10`)\r* `maxDepth` -- The maximum number of times to split when `maxObjects` is exceeded. (**Default:** `4`)\r\r```javascript\rlet page = findObjs({ type: 'page', /* ... */ })[0];\rlet q = new Quadtree(Rect.fromPage(page), { maxObjects: 20, maxDepth: 10 });\r```\r\r## Public Interface\r\r### `insert(rect, context)`\rInserts `rect` into the `Quadtree`.  If `context` is provided, it will be returned along with `rect` whenever it is retrieved.\r```javascript\rlet objs = findObjs({ type: 'graphic', pageid: page.id, /* ... */ });\robjs.forEach( o => q.insert( Rect.fromGraphic(o), {id: o.id} ) );\r```\r\r### `retrieve(rect)`\rRetrieves all the inserted objects which intersect with `rect`.  The return is an array of objects with the properties `rect` and `context`.  Both are references to the originally inserted `rect` and `context` objects.\r```javascript\rlet o = getObj( 'graphic', someid );\rlet collides = q.retrieve(Rect.fromGraphic(o));\r```\r\r### `remove(func, rect)`\rRemoves any inserted objects that return true when provided to the predicate `func`.  The predicate function `func` is called with the `context` object for each inserted object.  If a `rect` is supplied, only objects in that `Rect` are filtered using `func`.\r```javascript\rlet o = getObj( 'graphic', someid );\rq.remove( (c)=>c.id === o.id );\r```\r\r### `clear()`\rRemoves all inserted objects from the `Quadtree`.\r\r```javascript\rq.clear();\r```\r",
  "authors": "The Aaron",
  "roll20userid": "104025",
  "patreon": "https://www.patreon.com/shdwjk",
  "useroptions":{
  },
  "dependencies": {
  },
  "modifies": {
    "state.libTypes": "read,write"
  },
  "conflicts": [
  ]
}
