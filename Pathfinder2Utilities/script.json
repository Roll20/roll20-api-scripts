{
  "name": "Pathfinder 2 Utilities",
  "script": "pf2utils.js",
  "version": "100520",
  "previousversions": [],
  "description": "A set of utilities for Pathfinder 2 standard abilities and modifier tracking.\nAll commands start with !pf. Starting with !pfs instead will send the result only to the executing player and the GM. This is not necessary for Secret abilities, which are automatically sent only to the GM.\nYou can manually specify a target by placing an @ after the !pf giving an initial part of the character name in lower case with spaces removed. For example, a character named Ed Goblin would be targeted by !pf @edgoblin or just !pf @edgo. Tokens that don't represent characters are matched based on their token name. You can target all PCs by specifying !pf @pcs. You can specify several targets by seperating them with commas; eg !pf @pcs,edgo will target all PCs and Ed Goblin (assuming Ed Goblin is not a PC. If you don't manually specify a target, the selected token(s) are targeted. If you don't manually specify a target and no tokens are selected, and you are not the GM, all tokens you control are targeted.\n After the target specification (if there is one), should come the command followed by parameters separated by spaces. The available commands are as follows: `get <item>` reads the given number from the character sheet. Eg, `!pf @pcs get stealth` will display the Stealth values for all PCs. This can be used for any stat (reading the stat modifier, not the raw score), skill, perception, save, AC or level. The name of the property can be abbreviated as with ability names.\n`best <item>` finds the highest number in listed character sheets and reports who has it. Eg, !pf @pcs best perception will find the PC with the best perception and print their score.`roll <item>` acts like get but adds a d20 roll to the given values. The value printed will include the roll result, the highest level standard DC at which it succeeds, and the highest enemy modifier it beats as a DC.`rollinit <item>` acts like roll but also adds the initiative modifier to the given skill. If item is omitted, perception is the default.`rollinit! <item>` acts like rollinit but sends the result(s) to the turn tracker, keeping it in descending order.``ability <ability> <skill>` uses one of the standard Abilities from the Pathfinder 2 core rules. The ability is named in the same way as a target character - the start of the name in lower case, with no spaces. This will roll the appropriate skill on the target(s), send the roll to the player or the GM if appropriate (the GM only if the ability has the Secret tag), and also print out a summary table of the effects of hitting different success thresholds. If the ability is one where different skills can be specified, the skill to use is specified as the second parameter. For example, if Ed Goblin wants to sneak, you can enter `!pf @edgo ability sneak`. If he's trying to remember a spell, you can enter `!pf @edgo ability recall arcana`. \n\nAll of the roll commands above (including rollinit and ability), plus the modifers commands below, can have any number of roll tags appended to it as hashtags. roll, rollinit and ability automatically add the name of the skill being rolled, and its governing attribute, as hashtags. `mod add <name> <type> <value>` adds a modifier to the selected targets, with the given name and value. Type must be c, s, i or u for Circumstance, Status, Item, or Untyped respectively. Some tags must also be specified to indicate what rolls are affected; only rolls with all the named tags are affected. For example, if all PCs have a +2 status bonus to Fortitude saves against fear, you could enter `!pf @pcs mod add bravery s 2 #fortitude #fear`. If a modifier with the same name already exists, it is updated instead (even if it affects different targets, it is updated to affect the targets you specify. `mod list` lists all modifiers in play. `mod clear` clears all modifiers in play. `mod del <name>` wipes out the named modifier. `mod explain` calculates the total of temporary modifiers that would apply to rolls with the given tags on the given target, and displays a breakdown of the modifiers involved. For example, you could find every PCs bonuses to fortitude saves vs Fear with `!pf @pcs mod explain #fortitude #fear`. Note that this only counts temporary modifiers created using mod commands; the PC's actual Fortitute save value is not counted.",
  "authors": "Mark Green",
  "roll20userid": 1093402,
  "modifies": [
    {"_id":  "read"},
    {"_type":  "read"},
    {"_subtype": "read"},
    {"_pageid": "read"},
    {"represents":  "read"},
    {"controlledby":  "read"},
    {"turnorder":  "write"},
    {"playerpageid": "read"},
    {"current": "read"},
    {"Campaign": "read"}
  ]
}